HW2: Advanced MPI Programming
Implementing Collective Operations

Objectives:
This goal of this assignment is to practice MPI programming and to design
collective operations by hand (using point-to-point MPI operations).

Details:
/* The following function is a collective operation; that is, it shall be
called by all mpi processes or none at all. (Use MPI_COMM_WORLD.) Each process
is expected to provide an integer 'x', and the function returns the total sum
for the process whose rank is 'root'. The return value of all other processes
is zero. */
int add_all(int x, int root);

/* The following function is a collective operation; that is, it shall be
called by all mpi processes or none at all. (Use MPI_COMM_WORLD.) Each process
is expected to provide a block of data of size 'sendcnt' stored in 'sendbuf'.
When the function returns, each process will have the data blocks sent from all
other processes (including itself) stored in 'recvbuf'. recvbuf will be an
array of pointers to the received data (the function is in charge of allocating
the array and the buffer for the received data). recvcnt is an array storing
the size of the data. Again, the function is responsible for allocating the
array. More specifically, the data from the i-th process is received by every
process and placed in the i-th element of the 'recvbuf' and its size is put in
the i-th element of 'recvcnt'. One must not assume that all processes would
provide the same 'sendcnt'. */
void collect_all(char* sendbuf, int sendcnt, char** recvbuf, int* recvcnt);


If you run the test with, say, 4 MPI processes, the result should look similar
to:
              [0] add_all->6
              [2] collect_all[3]->"hello from rank 3" (sz=18)


NOTES FOR POINT-TO-POINT COMMUNICATION
https://cvw.cac.cornell.edu/mpip2p/p2pdef
- Involves the transfer of a message from one specific process to another
specific process in the communicator.

- Blocking Communication: means that the process waits to ensure the message
data have achieved a particular state before processing can continue.
- Nonblocking Communication: means that the processor merely requests to start 
an operation and continues processing.
